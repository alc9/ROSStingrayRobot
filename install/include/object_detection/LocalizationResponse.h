// Generated by gencpp from file object_detection/LocalizationResponse.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_MESSAGE_LOCALIZATIONRESPONSE_H
#define OBJECT_DETECTION_MESSAGE_LOCALIZATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_detection/GoalPositions.h>

namespace object_detection
{
template <class ContainerAllocator>
struct LocalizationResponse_
{
  typedef LocalizationResponse_<ContainerAllocator> Type;

  LocalizationResponse_()
    : Coords()  {
    }
  LocalizationResponse_(const ContainerAllocator& _alloc)
    : Coords(_alloc)  {
  (void)_alloc;
    }



   typedef  ::object_detection::GoalPositions_<ContainerAllocator>  _Coords_type;
  _Coords_type Coords;





  typedef boost::shared_ptr< ::object_detection::LocalizationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection::LocalizationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LocalizationResponse_

typedef ::object_detection::LocalizationResponse_<std::allocator<void> > LocalizationResponse;

typedef boost::shared_ptr< ::object_detection::LocalizationResponse > LocalizationResponsePtr;
typedef boost::shared_ptr< ::object_detection::LocalizationResponse const> LocalizationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection::LocalizationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection::LocalizationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detection::LocalizationResponse_<ContainerAllocator1> & lhs, const ::object_detection::LocalizationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Coords == rhs.Coords;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detection::LocalizationResponse_<ContainerAllocator1> & lhs, const ::object_detection::LocalizationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_detection::LocalizationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection::LocalizationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::LocalizationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection::LocalizationResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::LocalizationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection::LocalizationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection::LocalizationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "742db672f1005567be304d1ccc310265";
  }

  static const char* value(const ::object_detection::LocalizationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x742db672f1005567ULL;
  static const uint64_t static_value2 = 0xbe304d1ccc310265ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection::LocalizationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection/LocalizationResponse";
  }

  static const char* value(const ::object_detection::LocalizationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection::LocalizationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "GoalPositions Coords\n"
"\n"
"\n"
"================================================================================\n"
"MSG: object_detection/GoalPositions\n"
"GoalPos[] Coords\n"
"\n"
"================================================================================\n"
"MSG: object_detection/GoalPos\n"
"float32 X\n"
"float32 Y\n"
"float32 Z\n"
;
  }

  static const char* value(const ::object_detection::LocalizationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection::LocalizationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Coords);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalizationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection::LocalizationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection::LocalizationResponse_<ContainerAllocator>& v)
  {
    s << indent << "Coords: ";
    s << std::endl;
    Printer< ::object_detection::GoalPositions_<ContainerAllocator> >::stream(s, indent + "  ", v.Coords);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_MESSAGE_LOCALIZATIONRESPONSE_H
